# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'passwordGenerator.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import os
import random

PROJECT_PATH = os.path.dirname(__file__)
optionList = ["Yes", "No"]


class Ui_mainWindow(object):
    def setupUi(self, mainWindow):
        mainWindow.setObjectName("mainWindow")
        mainWindow.resize(480, 440)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(mainWindow.sizePolicy().hasHeightForWidth())
        mainWindow.setSizePolicy(sizePolicy)
        self.centralwidget = QtWidgets.QWidget(mainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.btn_generate = QtWidgets.QPushButton(self.centralwidget)
        self.btn_generate.setEnabled(True)
        self.btn_generate.setGeometry(QtCore.QRect(30, 210, 420, 50))
        self.btn_generate.setObjectName("btn_generate")
        self.sb_length = QtWidgets.QSpinBox(self.centralwidget)
        self.sb_length.setGeometry(QtCore.QRect(20, 20, 261, 22))
        self.sb_length.setObjectName("sb_length")
        self.sb_length.setMaximum(500)
        self.lbl_qlength = QtWidgets.QLabel(self.centralwidget)
        self.lbl_qlength.setGeometry(QtCore.QRect(290, 20, 151, 16))
        self.lbl_qlength.setObjectName("lbl_qlength")
        self.lbl_qnumbers = QtWidgets.QLabel(self.centralwidget)
        self.lbl_qnumbers.setGeometry(QtCore.QRect(20, 60, 440, 16))
        self.lbl_qnumbers.setObjectName("lbl_qnumbers")
        self.txt_password = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.txt_password.setEnabled(False)
        self.txt_password.setGeometry(QtCore.QRect(30, 290, 420, 50))
        self.txt_password.setObjectName("txt_password")
        self.lb_qsymbols = QtWidgets.QLabel(self.centralwidget)
        self.lb_qsymbols.setGeometry(QtCore.QRect(20, 130, 431, 16))
        self.lb_qsymbols.setObjectName("lb_qsymbols")
        self.lbl_generated = QtWidgets.QLabel(self.centralwidget)
        self.lbl_generated.setGeometry(QtCore.QRect(30, 375, 420, 20))
        self.lbl_generated.setText("")
        self.lbl_generated.setObjectName("lbl_generated")
        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox.setGeometry(QtCore.QRect(20, 150, 440, 40))
        self.groupBox.setTitle("")
        self.groupBox.setObjectName("groupBox")
        self.rb_symbolsYes = QtWidgets.QRadioButton(self.groupBox)
        self.rb_symbolsYes.setGeometry(QtCore.QRect(20, 10, 82, 17))
        self.rb_symbolsYes.setChecked(True)
        self.rb_symbolsYes.setObjectName("rb_symbolsYes")
        self.rb_symbolsNo = QtWidgets.QRadioButton(self.groupBox)
        self.rb_symbolsNo.setGeometry(QtCore.QRect(120, 10, 82, 17))
        self.rb_symbolsNo.setChecked(False)
        self.rb_symbolsNo.setObjectName("rb_symbolsNo")
        self.groupBox_2 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_2.setGeometry(QtCore.QRect(20, 80, 440, 40))
        self.groupBox_2.setTitle("")
        self.groupBox_2.setObjectName("groupBox_2")
        self.rb_passwordYes = QtWidgets.QRadioButton(self.groupBox_2)
        self.rb_passwordYes.setGeometry(QtCore.QRect(20, 10, 82, 17))
        self.rb_passwordYes.setChecked(True)
        self.rb_passwordYes.setObjectName("rb_passwordYes")
        self.rb_passwordNo = QtWidgets.QRadioButton(self.groupBox_2)
        self.rb_passwordNo.setGeometry(QtCore.QRect(120, 10, 82, 17))
        self.rb_passwordNo.setChecked(False)
        self.rb_passwordNo.setObjectName("rb_passwordNo")
        mainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(mainWindow)
        self.statusbar.setObjectName("statusbar")
        mainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(mainWindow)
        QtCore.QMetaObject.connectSlotsByName(mainWindow)
        self.btn_generate.clicked.connect(self.generator)

    def retranslateUi(self, mainWindow):
        _translate = QtCore.QCoreApplication.translate
        mainWindow.setWindowTitle(_translate("mainWindow", "Password Generator"))
        self.btn_generate.setText(_translate("mainWindow", "Generate"))
        self.lbl_qlength.setText(_translate("mainWindow", "Password Length"))
        self.lbl_qnumbers.setText(_translate("mainWindow", "Do you want numbers in your password?"))
        self.lb_qsymbols.setText(_translate("mainWindow", "Do you want symbols in your password?"))
        self.rb_symbolsYes.setText(_translate("mainWindow", "Yes"))
        self.rb_symbolsNo.setText(_translate("mainWindow", "No"))
        self.rb_passwordYes.setText(_translate("mainWindow", "Yes"))
        self.rb_passwordNo.setText(_translate("mainWindow", "No"))

    def generateLowerCase(self):
        random.seed()
        keychar = chr(random.randint(97,122))
        return keychar

    def generateUpperCase(self):
        random.seed()
        keychar = chr(random.randint(65,90))
        return keychar

    def generateNumber(self):
        random.seed()
        keychar = chr(random.randint(48,57))
        return keychar

    def generateSymbol(self):
        random.seed()
        symbol_part = random.randint(1,4)
        if symbol_part == 1:
            return chr(random.randint(33,47))
        elif symbol_part == 2:
            return chr(random.randint(58,64))
        elif symbol_part == 3:
            return chr(random.randint(91,95))
        elif symbol_part == 4:
            return chr(random.randint(123,126))

    def generator(self):
        self.txt_password.setPlainText("")
        length = int(self.sb_length.text())
        if self.rb_passwordYes.isChecked() == True:
            numbers = 0
        else:
            numbers = 1
        if self.rb_symbolsYes.isChecked() == True:
            symbols = 0
        else:
            symbols = 1
        key = ''
        if numbers == 0:
            if symbols == 0:
                for i in range (length):
                    random.seed()
                    val = random.randint(1,4)
                    if val == 1:
                        ##lower case letter
                        key += self.generateLowerCase()
                    elif val == 2:
                        ##Upper case letter
                        key += self.generateUpperCase()
                    elif val == 3:
                        ##Number
                        key += self.generateNumber()
                    elif val == 4:
                        ##Symbols
                        key += self.generateSymbol()
            else:
                for i in range (length):
                    random.seed()
                    val = random.randint(1,3)
                    if val == 1:
                        ##lower case letter
                        key += self.generateLowerCase()
                    elif val == 2:
                        ##Upper case letter
                        key += self.generateUpperCase()
                    elif val == 3:
                        ##Number
                        key += self.generateNumber()
        else:
            if symbols == 0:
                for i in range (length):
                    random.seed()
                    val = random.randint(1,3)
                    if val == 1:
                        ##lower case letter
                        key += self.generateLowerCase()
                    elif val == 2:
                        ##Upper case letter
                        key += self.generateUpperCase()
                    elif val == 3:
                        ##Symbols
                        key += self.generateSymbol()
            else:
                for i in range (length):
                    random.seed()
                    val = random.randint(1,2)
                    if val == 1:
                        ##lower case letter
                        key += self.generateLowerCase()
                    elif val == 2:
                        ##Upper case letter
                        key += self.generateUpperCase()
        self.txt_password.setPlainText(key)
        self.lbl_generated.setText("The password will be saved in plain text file passwords.txt")
        with open('password.txt', 'a') as file:
            file.write(key + " - " + str(length) + " Characters Password" + '\n')
            file.write("_____________________ \n")


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    mainWindow = QtWidgets.QMainWindow()
    ui = Ui_mainWindow()
    ui.setupUi(mainWindow)
    mainWindow.show()
    sys.exit(app.exec_())
